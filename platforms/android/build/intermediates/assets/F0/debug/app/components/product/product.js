"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var router_2 = require("@angular/router");
var product_services_1 = require("./product.services");
var serverurl_1 = require("./../serverurl"); // get server test
var LocalStorage = require("nativescript-localstorage");
var sequence = [0];
var countCart = 1;
var url = 0;
var ProductComponent = (function () {
    function ProductComponent(router, passing, myService, server) {
        this.router = router;
        this.passing = passing;
        this.myService = myService;
        this.server = server;
        this.product_id = null;
        this.i = 0;
        this.product_id_list = [];
        this.product_image_list = [];
        this.localid = LocalStorage.getItem("customer_id");
    }
    ProductComponent.prototype.ngOnInit = function () {
        var _this = this;
        // this.extractData()
        this.passing.params.subscribe(function (params) {
            _this.id = +params["id"];
        });
        console.log("constructor in product : " + this.id);
        if (sequence.length == 1) {
            LocalStorage.setItem("sequence", sequence);
        }
        sequence = LocalStorage.getItem("sequence"); /// get
        console.log("Secquence b4 : " + sequence);
        sequence.push(this.id); /// how to append sequence
        LocalStorage.setItem("sequence", sequence); /// set
        console.log("Secquence af : " + sequence);
        console.log("Secquence Length : " + sequence.length);
        // }
        if (sequence.length >= 3) {
            this.extractData();
            this.makePostSequenceRequest();
            this.extractDataPredict();
        }
        else {
            this.extractData();
        }
        // console.log("constructor in product : "+this.id); 
        // this.sequence.push(this.id)
        // console.log("Secquence : "+this.sequence);
    };
    ProductComponent.prototype.extractData = function () {
        var _this = this;
        console.log("extractData");
        this.myService.getData()
            .subscribe(function (result) { return _this.onGetDataSuccess(result); }, function (error) { return _this.onGetDataError(error); });
    };
    ProductComponent.prototype.extractDataPredict = function () {
        var _this = this;
        console.log("extractData");
        this.myService.getDataPredict()
            .subscribe(function (result) { return _this.onGetDataSuccessPredict(result); }, function (error) { return _this.onGetDataError(error); });
    };
    ProductComponent.prototype.onGetDataSuccess = function (res) {
        console.log("onGetDataSuccess");
        // console.log("onGetDataSuccess : "+JSON.stringify(res)) // res is list
        this.ran1 = Math.floor(Math.random() * res.length) + 1;
        this.ran2 = Math.floor(Math.random() * res.length) + 1;
        this.ran3 = Math.floor(Math.random() * res.length) + 1;
        this.ran4 = Math.floor(Math.random() * res.length) + 1;
        this.ran5 = Math.floor(Math.random() * res.length) + 1;
        this.ran6 = Math.floor(Math.random() * res.length) + 1;
        this.ran7 = Math.floor(Math.random() * res.length) + 1;
        this.ran8 = Math.floor(Math.random() * res.length) + 1;
        this.ran9 = Math.floor(Math.random() * res.length) + 1;
        this.ran10 = Math.floor(Math.random() * res.length) + 1;
        for (var _i = 0, res_1 = res; _i < res_1.length; _i++) {
            var product = res_1[_i];
            if (this.id == product.id) {
                this.product_id = product.id;
                console.log("res.id : " + product.id + " this.id : " + this.id);
                this.product_name = product.product_name;
                this.product_price = product.product_price;
                this.product_quantity = product.product_quantity;
                this.product_detail = product.product_detail;
                this.product_image = product.product_image;
            }
            if (sequence.length < 3) {
                if (product.id == this.ran1) {
                    this.product_id_list[0] = product.id;
                    this.product_image_list[0] = product.product_image;
                }
                if (product.id == this.ran2) {
                    this.product_id_list[1] = product.id;
                    this.product_image_list[1] = product.product_image;
                }
                if (product.id == this.ran3) {
                    this.product_id_list[2] = product.id;
                    this.product_image_list[2] = product.product_image;
                }
                if (product.id == this.ran4) {
                    this.product_id_list[3] = product.id;
                    this.product_image_list[3] = product.product_image;
                }
                if (product.id == this.ran5) {
                    this.product_id_list[4] = product.id;
                    this.product_image_list[4] = product.product_image;
                }
                if (product.id == this.ran6) {
                    this.product_id_list[5] = product.id;
                    this.product_image_list[5] = product.product_image;
                }
                if (product.id == this.ran7) {
                    this.product_id_list[6] = product.id;
                    this.product_image_list[6] = product.product_image;
                }
                if (product.id == this.ran8) {
                    this.product_id_list[7] = product.id;
                    this.product_image_list[7] = product.product_image;
                }
                if (product.id == this.ran9) {
                    this.product_id_list[8] = product.id;
                    this.product_image_list[8] = product.product_image;
                }
                if (product.id == this.ran10) {
                    this.product_id_list[9] = product.id;
                    this.product_image_list[9] = product.product_image;
                }
            }
        }
    };
    ProductComponent.prototype.onGetDataSuccessPredict = function (res) {
        console.log("onGetDataSuccess_Predict");
        // console.log("GET RES PREDICT : "+JSON.stringify(res)) // must be list
        // console.log("TEST : "+ JSON.stringify(res["queryset"]))
        for (var _i = 0, _a = res["queryset"]; _i < _a.length; _i++) {
            var product = _a[_i];
            var picture = JSON.stringify(product.product_image).slice(1, -1);
            ;
            console.log("URL : " + picture);
            if (this.i < 10) {
                this.product_id_list[this.i] = JSON.stringify(product.id);
                this.product_image_list[this.i] = this.server.getserver() + "media/" + picture;
                // console.log("Predict Product id : "+ this.product_id_list[this.i])
                // console.log("Predict Product image : "+this.product_image_list[this.i])
                this.i += 1;
            }
        }
    };
    ProductComponent.prototype.onGetDataError = function (error) {
        var body = error.json() || "";
        var err = body.error || JSON.stringify(body);
        console.log("onGetDataError: " + err);
    };
    ////////////////////////////////////// POST  //////////////////////////////////////////////
    ProductComponent.prototype.add = function () {
        countCart = LocalStorage.getItem("countCart");
        if (countCart <= 5) {
            if (this.product_id != null) {
                countCart += 1;
                LocalStorage.setItem("countCart", countCart);
                this.makePostRequest();
                this.makePostRequestCart();
            }
            else {
                alert("Please Wait");
            }
            console.log("Count Cart : " + countCart);
        }
        else {
            alert("Cart is full");
        }
    };
    ProductComponent.prototype.makePostRequest = function () {
        console.log("makePostRequest");
        this.myService
            .postData({
            product: this.product_id,
            customer: this.localid,
            totalprice_per_product: null,
            status_order: null,
        })
            .subscribe(function (res) {
        }, function (err) {
            console.log("Error : " + JSON.stringify(err));
        });
    };
    ProductComponent.prototype.makePostRequestCart = function () {
        console.log("makePostRequestCart");
        this.myService
            .postDataCart({
            product: this.product_id,
            customer: this.localid,
            totalprice_per_product: this.product_price,
        })
            .subscribe(function (res) {
            alert("Add to Cart Success");
        }, function (err) {
            alert("Add to Cart Error\nPlease try again");
            console.log("Error : " + JSON.stringify(err));
        });
    };
    ProductComponent.prototype.makePostSequenceRequest = function () {
        console.log("makePostSequenceRequest");
        var sequencelist = JSON.parse(JSON.stringify(sequence));
        console.log("sequencelist : " + sequencelist);
        this.myService.postSequenceData({
            sequencelist: sequencelist
        })
            .subscribe(function (res) {
            console.log("Post Sequence Success : " + JSON.stringify(res));
        }, function (err) {
            console.log("Error IN makePostSequenceRequest : " + err);
        });
    };
    ProductComponent.prototype.product = function (product_id) {
        if (product_id === void 0) { product_id = 0; }
        console.log("product_id : " + product_id);
        console.log("URL : " + url);
        if (product_id != 0 && url == 0) {
            this.router.navigate(["product1/", product_id]);
            url = 1;
        }
        else if (product_id != 0 && url == 1) {
            this.router.navigate(["product/", product_id]);
            url = 0;
        }
        if (product_id == 0) {
            alert("Please Wait");
        }
    };
    ProductComponent.prototype.cart = function () {
        this.router.navigate(["cart"]); // come from path in routing ts
    };
    ProductComponent.prototype.home = function () {
        this.router.navigate(["home"]); // come from path in routing ts
    };
    return ProductComponent;
}());
ProductComponent = __decorate([
    core_1.Component({
        selector: "product",
        templateUrl: "./components/product/product.html",
        providers: [product_services_1.MyHttpGetService, serverurl_1.ServerComponent]
    }),
    __metadata("design:paramtypes", [router_1.Router, router_2.ActivatedRoute, product_services_1.MyHttpGetService, serverurl_1.ServerComponent])
], ProductComponent);
exports.ProductComponent = ProductComponent;
//# sourceMappingURL=data:application/json;base64,