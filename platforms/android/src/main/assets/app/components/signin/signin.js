"use strict";
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var router_1 = require("@angular/router");
var signin_services_1 = require("./signin.services");
var md5_1 = require("ts-md5/dist/md5");
var serverurl_1 = require("./../serverurl"); // get server test
var LocalStorage = require("nativescript-localstorage");
var SigninComponent = (function () {
    function SigninComponent(router, page, myService, server) {
        this.router = router;
        this.page = page;
        this.myService = myService;
        this.server = server;
        this.getusername = null;
        this.getpassword = null;
        this.i = 0;
    }
    SigninComponent.prototype.ngOnInit = function () {
        // before app start
        // LocalStorage.clear();
        console.log("SERVER : " + this.server.getserver());
        this.getid = LocalStorage.getItem("customer_id");
        console.log("Localstorage UserID (BEFORE SIGNIN): " + this.getid);
        this.page.actionBarHidden = true; // hide action bar
    };
    SigninComponent.prototype.login = function () {
        if (this.getusername == null && this.getpassword == null) {
            console.log("no input username or password");
            alert("Username or Password Incorrect");
        }
        else {
            this.extractData();
        }
    };
    SigninComponent.prototype.extractData = function () {
        var _this = this;
        console.log("extractData");
        // console.log("Username (INPUT) : " + this.getusername)
        // console.log("Password (INPUT) : " + this.getpassword)
        this.myService.getData()
            .subscribe(function (result) { return _this.onGetDataSuccess(result); }, function (error) { return _this.onGetDataError(error); });
    };
    SigninComponent.prototype.onGetDataSuccess = function (res) {
        console.log("onGetDataSuccess");
        this.getusername2 = this.getusername.toLowerCase();
        var e = md5_1.Md5.hashStr(this.getpassword);
        console.log("Username (INPUT) : " + this.getusername2);
        console.log("Password (INPUT) : " + e);
        for (var _i = 0, res_1 = res; _i < res_1.length; _i++) {
            var customer = res_1[_i];
            if (this.getid == customer.id) {
                this.i = 1;
                this.router.navigate(["/home"]);
            }
            else if (customer.username == this.getusername2 && customer.password == e) {
                LocalStorage.setItem("customer_id", customer.id); /// set
                this.getid = LocalStorage.getItem("customer_id"); /// get
                console.log("Customer id in localstorage (SIGNIN) : " + this.getid);
                this.i = 1;
                this.router.navigate(["/home"]);
            }
        }
        if (this.i == 0) {
            alert("Username or Password Incorrect");
        }
    };
    SigninComponent.prototype.onGetDataError = function (error) {
        var body = error.json() || "";
        var err = body.error || JSON.stringify(body);
        alert("Connection Error");
        console.log("onGetDataError: " + err);
    };
    SigninComponent.prototype.signup = function () {
        this.router.navigate(["signup"]); // come from path in routing ts
    };
    return SigninComponent;
}());
SigninComponent = __decorate([
    core_1.Component({
        selector: "signin",
        templateUrl: "./components/signin/signin.html",
        providers: [signin_services_1.MyHttpGetService, serverurl_1.ServerComponent]
    }),
    __metadata("design:paramtypes", [router_1.Router, page_1.Page, signin_services_1.MyHttpGetService, serverurl_1.ServerComponent])
], SigninComponent);
exports.SigninComponent = SigninComponent;
//# sourceMappingURL=data:application/json;base64,