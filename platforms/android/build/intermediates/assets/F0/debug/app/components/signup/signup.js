"use strict";
var core_1 = require("@angular/core");
var signup_services_1 = require("./signup.services");
var router_1 = require("@angular/router");
var md5_1 = require("ts-md5/dist/md5");
var serverurl_1 = require("./../serverurl"); // get server test
var SignupComponent = (function () {
    function SignupComponent(router, myService, server) {
        this.router = router;
        this.myService = myService;
        this.server = server;
        this.user = null;
        this.pass = null;
        this.repass = null;
        this.fname = null;
        this.lname = null;
        this.gender = null;
        this.age = null;
        this.tel = null;
        this.typeofphone = null;
        this.email = null;
        this.jobs = null;
        this.address = null;
        this.postcode = null;
        this.exist_username = [];
        this.i = 0;
        this.j = 0;
        this.k = 0;
        this.aldy = 0;
        // >> (hide)
        this.isItemVisible = false;
    }
    SignupComponent.prototype.ngOnInit = function () {
        this.extractData();
        // this.extractResponseInfo();
    };
    SignupComponent.prototype.extractData = function () {
        var _this = this;
        console.log("extractData");
        this.myService.getData()
            .subscribe(function (result) { return _this.onGetDataSuccess(result); }, function (error) { return _this.onGetDataError(error); });
    };
    SignupComponent.prototype.onGetDataSuccess = function (res) {
        console.log("onGetDataSuccess");
        for (var _i = 0, res_1 = res; _i < res_1.length; _i++) {
            var user = res_1[_i];
            this.exist_username[this.i] = user.username;
            console.log("Exist Username : " + this.exist_username[this.i]);
            this.i++;
        }
    };
    SignupComponent.prototype.onGetDataError = function (error) {
        var body = error.json() || "";
        var err = body.error || JSON.stringify(body);
        alert("Connection Error");
        console.log("onGetDataError: " + err);
    };
    /////////////////////////// POST /////////////////////////////////
    SignupComponent.prototype.makePostRequest = function () {
        var _this = this;
        this.user = this.user.toLowerCase();
        if (this.pass != this.repass) {
            alert("Re-Password is Incorrect");
            this.router.navigate(["signup"]);
        }
        else if (this.tel.length != 10) {
            alert("Phone Number is Incorrect");
            this.router.navigate(["signup"]);
        }
        else {
            var e = md5_1.Md5.hashStr(this.pass);
            console.log("makePostRequest");
            for (this.k = 0; this.k < this.exist_username.length; this.k++) {
                if (this.exist_username[this.k] == this.user) {
                    this.aldy = 1;
                    alert("Username is already");
                    this.k = this.exist_username.length;
                }
                else {
                    this.aldy = 2;
                }
            }
            if (this.aldy == 2) {
                this.myService
                    .postData({
                    username: this.user,
                    password: e,
                    first_name: this.fname,
                    last_name: this.lname,
                    gender: this.gender,
                    age: this.age,
                    tel: this.tel,
                    typeofphone: this.typeofphone,
                    email: this.email,
                    jobs: this.jobs,
                    address: this.address,
                    postcode: this.postcode,
                })
                    .subscribe(function (res) {
                    alert("Sign Up Success \nusername is " + _this.user);
                    console.log(JSON.stringify(res));
                    _this.isItemVisible = true;
                }, function (err) {
                    // alert("Sign Up Error");
                    alert("Sign Up Error\nPlease try again");
                    console.log("Error : " + JSON.stringify(err));
                });
            } // if
        } // else
    }; // makepost
    SignupComponent.prototype.back = function () {
        this.router.navigate(["/"]);
    };
    SignupComponent.prototype.submit = function () {
        if (this.user == null) {
            alert("Please Fill Username");
            this.router.navigate(["signup"]);
        }
        else if (this.pass == null) {
            alert("Please Fill Password");
            this.router.navigate(["signup"]);
        }
        else if (this.repass == null) {
            alert("Please Fill Re-Password");
            this.router.navigate(["signup"]);
        }
        else if (this.fname == null) {
            alert("Please Fill First Name");
            this.router.navigate(["signup"]);
        }
        else if (this.lname == null) {
            alert("Please Fill Last Name");
            this.router.navigate(["signup"]);
        }
        else if (this.tel == null) {
            alert("Please Fill Phone Number");
            this.router.navigate(["signup"]);
        }
        else if (this.email == null) {
            alert("Please Fill E-mail Address");
            this.router.navigate(["signup"]);
        }
        else if (this.address == null) {
            alert("Please Fill Address");
            this.router.navigate(["signup"]);
        }
        else if (this.postcode == null) {
            alert("Please Fill Postcode");
            this.router.navigate(["signup"]);
        }
        else {
            this.makePostRequest();
            this.router.navigate(["/"]);
        }
    };
    return SignupComponent;
}());
SignupComponent = __decorate([
    core_1.Component({
        selector: "signup",
        templateUrl: "./components/signup/signup.html",
        providers: [signup_services_1.MyHttpPostService, serverurl_1.ServerComponent]
    }),
    __metadata("design:paramtypes", [router_1.Router, signup_services_1.MyHttpPostService, serverurl_1.ServerComponent])
], SignupComponent);
exports.SignupComponent = SignupComponent;
//# sourceMappingURL=data:application/json;base64,