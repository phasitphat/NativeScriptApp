"use strict";
var core_1 = require("@angular/core");
var editprofile_services_1 = require("./editprofile.services");
var router_1 = require("@angular/router");
var serverurl_1 = require("./../serverurl"); // get server test
var LocalStorage = require("nativescript-localstorage");
var EditprofileComponent = (function () {
    function EditprofileComponent(router, myService, server) {
        this.router = router;
        this.myService = myService;
        this.server = server;
        ///////////////////// PATCH  ////////////////////////
        this.getfname = null;
        this.getlname = null;
        this.getphone = null;
        this.getemail = null;
        this.gettypephone = null;
        this.getjob = null;
        this.getaddress = null;
        this.getpostcode = null;
        this.localid = LocalStorage.getItem("customer_id"); /// get
    }
    EditprofileComponent.prototype.ngOnInit = function () {
        this.extractData();
        // this.extractResponseInfo();
    };
    EditprofileComponent.prototype.extractData = function () {
        var _this = this;
        console.log("extractData");
        this.myService.getData()
            .subscribe(function (result) { return _this.onGetDataSuccess(result); }, function (error) { return _this.onGetDataError(error); });
    };
    EditprofileComponent.prototype.onGetDataSuccess = function (res) {
        console.log("onGetDataSuccess");
        this.id = res.id;
        // this.username = res.user;
        // this.password = res.password;
        this.first_name = res.first_name;
        this.last_name = res.last_name;
        this.email = res.email;
        this.phone = res.tel;
        this.typephone = res.typeofphone;
        this.jobs = res.jobs;
        this.address = res.address;
        this.postcode = res.postcode;
    };
    EditprofileComponent.prototype.onGetDataError = function (error) {
        var body = error.json() || "";
        var err = body.error || JSON.stringify(body);
        console.log("onGetDataError: " + err);
    };
    EditprofileComponent.prototype.makePostRequest = function () {
        console.log("makePostRequest");
        this.myService
            .postData({
            first_name: this.getfname,
            last_name: this.getlname,
            phone: this.getphone,
            email: this.getemail,
            typeofphone: this.gettypephone,
            jobs: this.getjob,
            address: this.getaddress,
            postcode: this.getpostcode,
        })
            .subscribe(function (res) {
            alert("Edit Profile Success");
            // this.isItemVisible = true;
        }, function (err) {
            alert("Edit Profile Error\nPlease try again");
            console.log("Error : " + JSON.stringify(err));
        });
    };
    EditprofileComponent.prototype.menu = function () {
        this.router.navigate(["menu"]);
    };
    EditprofileComponent.prototype.edit = function () {
        if (this.getfname == null) {
            alert("Please Fill First Name");
            this.router.navigate(["editprofile"]);
        }
        else if (this.getlname == null) {
            alert("Please Fill Last Name");
            this.router.navigate(["editprofile"]);
        }
        else if (this.getphone == null) {
            alert("Please Fill Phone Number");
            this.router.navigate(["editprofile"]);
        }
        else if (this.getemail == null) {
            alert("Please Fill E-mail Address");
            this.router.navigate(["editprofile"]);
        }
        else if (this.gettypephone == null) {
            alert("Please Fill Type of Phone (IOS/ANDROID)");
            this.router.navigate(["editprofile"]);
        }
        else if (this.getjob == null) {
            alert("Please Fill Jobs");
            this.router.navigate(["editprofile"]);
        }
        else if (this.getaddress == null) {
            alert("Please Fill Address");
            this.router.navigate(["editprofile"]);
        }
        else if (this.getpostcode == null) {
            alert("Please Fill Postcode");
            this.router.navigate(["editprofile"]);
        }
        else {
            this.makePostRequest();
            this.router.navigate(["menu"]);
        }
    };
    return EditprofileComponent;
}());
EditprofileComponent = __decorate([
    core_1.Component({
        selector: "editprofile",
        templateUrl: "./components/editprofile/editprofile.html",
        providers: [editprofile_services_1.MyHttpGetService, serverurl_1.ServerComponent]
    }),
    __metadata("design:paramtypes", [router_1.Router, editprofile_services_1.MyHttpGetService, serverurl_1.ServerComponent])
], EditprofileComponent);
exports.EditprofileComponent = EditprofileComponent;
//# sourceMappingURL=data:application/json;base64,